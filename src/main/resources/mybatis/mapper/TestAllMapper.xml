<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jef.dao.TestAllDao">
    <!-- 可以设置多个resultMap -->
    <resultMap id="BaseResultMap" type="com.jef.entity.TestAll">
        <id property="id" column="id"/>
        <result property="testName" column="test_name"/>
        <result property="testPhone" column="test_phone"/>
    </resultMap>
    <!-- 用于定制化查询出来的字段 -->
    <sql id="Base_Column_List">
        id, test_name testName, test_phone testPhone
    </sql>
    <!-- 通用解读：id映射dao层的接口中的方法，resultMap对应的为resultMap配置中的id的名称，resultType为
    实体、Map、List等，parmeterType为实体、List、Map等，parameterMap不建议使用 -->
    <!-- select解读，单一查询，批量查询实体都类似 -->
    <!-- 使用resultMap，建议使用 -->
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select * from test_all
        where id = #{id}
    </select>
    <!-- 使用resultType，这种方式需要对字段简称命名为实体中的属性  -->
    <select id="selectByPrimaryKeySecond" resultType="com.jef.entity.TestAll" parameterType="java.lang.Long">
        select * from test_all
        where id = #{id}
    </select>
    <!-- 使用定制化的字段 -->
    <select id="selectByPrimaryKeyThird" resultType="com.jef.entity.TestAll" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List" />
        from test_all
        where id = #{id}
    </select>
    <!-- 批量查询多个实体，批量更新、删除多个实体同理 -->
    <select id="selectByIdsAndOther" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from test_all
        where id in 
        <foreach collection="idList" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        <if test="testName != null">
            and test_name = #{testName}
        </if>
    </select>
    <select id="selectByEntity" resultType="com.jef.entity.TestAll" parameterType="com.jef.entity.TestAll">
        select
        <include refid="Base_Column_List" />
        from test_all
        where test_name = #{testName}
    </select>
    <!-- 批量查询多个实体，批量更新、删除多个实体同理 -->
    <select id="selectByIds" resultMap="BaseResultMap" parameterType="java.util.List">
        select
        <include refid="Base_Column_List" />
        from test_all
        where id in
        <foreach collection="idList" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    <select id="getByIdsAndName" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from test_all
        where id in
        <foreach collection="idList" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        <if test="name != null">
            and test_name = #{name}
        </if>
    </select>
    <!-- choose，when，otherwise -->
    <select id="selectUseChoose" resultType="com.jef.entity.TestAll" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List" />
        from test_all
        where id >= 1
        <choose>
            <when test='testName != null and testName != "0"'>
                and test_name = #{testName}
            </when>
            <otherwise>
                and test_phone = #{testPhone}
            </otherwise>
        </choose>
    </select>
    <!-- 可能会有一个条件都不存在时，使用where关键字，将上面的selectUseChoose中的where id >= 1去掉 改为 <where></where> -->
    <select id="selectUseWhere" resultType="com.jef.entity.TestAll" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List" />
        from test_all
        <where>
            <if test="testName != null">
                and test_name = #{testName}
            </if>
            <if test="testPhone != null">
                and test_phone = #{testPhone}
            </if>
            <if test="testPhoneIsOneTwoThree">
                and test_phone = '123'
            </if>
        </where>
    </select>
    <!-- trim关键字的作用类似于where关键字的作用 -->
    <select id="selectUseTrim" resultType="com.jef.entity.TestAll" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List" />
        from test_all
        <trim prefix="where" prefixOverrides="and |or ">
            <if test="testName != null">
                and test_name = #{testName}
            </if>
            <if test="testPhone != null">
                and test_phone = #{testPhone}
            </if>
        </trim>
    </select>
    <!-- bind关键字，用于给新属性传字值 -->
    <select id="selectUseBind" resultType="com.jef.entity.TestAll" parameterType="java.util.Map">
        <bind name="testNamePattern" value="'%' + testName + '%'" />
        select
        <include refid="Base_Column_List" />
        from test_all
        where test_name like #{testNamePattern}
    </select>
    <!-- 单个插入实体 -->
    <insert id="insertSelect" parameterType="com.jef.entity.TestAll">
        insert into test_all
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="testName != null">
                test_name,
            </if>
            <if test="testPhone != null">
                test_phone,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="testName != null">
                #{testName},
            </if>
            <if test="testPhone != null">
                #{testPhone},
            </if>
        </trim>
    </insert>
    <!-- 单个插入实体 -->
    <insert id="insert" parameterType="com.jef.entity.TestAll" useGeneratedKeys="true" keyProperty="id">
        insert into test_all
        (
        test_name, test_phone, createTime
        ) values (
        #{testName}, #{testPhone}, now()
        )
    </insert>
    <!-- 批量插入，复制单个插入的全部内容，然后先把values后的内容拷贝到其它文本编辑器中，替换 #{ 为 #{item. ，替换完之后覆盖原有的values后的内容，最后添加foreach的开头和结尾即可 -->
    <insert id="batchInsert" parameterType="java.util.List">
        insert into test_all
        (test_name, test_phone, createTime)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.testName}, #{item.testPhone}, now())
        </foreach>
    </insert>
    <delete id="deleteByIds" parameterType="java.util.List">
        delete from test_all
        where id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
    <!-- 批量更新多个字段，使用了set关键字，set关键字或去除最后面条件多余的, -->
    <update id="updateNameOrPhone" parameterType="java.util.Map">
        update test_all
        <set>
            <if test="testName != null">
                test_name = #{testName},
            </if>
            <if test="testPhone != null">
                test_phone = #{testPhone},
            </if>
        </set>
        where id = #{id}
    </update>
    <!-- set关键字，可以更新一个或多个字段 -->
    <update id="updateNameOrPhoneSecond" parameterType="com.jef.entity.TestAll">
        update test_all
        <set>
            <if test="testName != null">
                test_name = #{testName},
            </if>
            <if test="testPhone != null">
                test_phone = #{testPhone},
            </if>
        </set>
        where id = #{id}
    </update>
    <select id="getByNameAndPhone" resultType="com.jef.entity.TestAll">
        select
        <include refid="Base_Column_List" />
        from test_all
        <where>
        <if test="testName != null">
           and test_name = #{testName}
        </if>
        <if test="testPhone != null">
           and test_phone = #{testPhone}
        </if>
        </where>
    </select>
    <select id="getByName" resultType="com.jef.entity.TestAll" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List" />
        from test_all
        where test_name = #{testName}
    </select>
    <select id="getByNameMap" resultType="java.util.Map" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List" />
        from test_all
        where test_name like concat('%', #{testName}, '%')
    </select>
    <select id="getAllTestAll" resultType="com.jef.entity.TestAll" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List" />
        from test_all
    </select>
    <select id="getByNames" resultType="java.lang.String" parameterType="java.util.Map">
        select test_name from test_all
        where test_name in
        <foreach collection="nameList" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
        <if test="testName != null">
        and test_name like concat('%', #{testName}, '%')
        </if>
    </select>
    <select id="getByNamesSet" resultType="java.lang.String" parameterType="java.util.Map">
        select test_name from test_all
        where test_name in
        <foreach collection="nameList" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
        <if test="testName != null">
        and test_name like concat('%', #{testName}, '%')
        </if>
    </select>

    <select id="getAllTestAllNPE" resultType="com.jef.entity.TestAll" parameterType="java.lang.String">
        select
        min(id) as id, test_name as testName
        from test_all
        where 1 = 2
    </select>

    <select id="getAllTestAllNum" resultType="java.lang.Integer">
        select
        count(*)
        from test_all
    </select>
    <select id="getTestAllByTime" resultType="com.jef.entity.TestAll" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List" />
        from test_all
        where
        <![CDATA[ createTime >= #{startDate} ]]>
        and <![CDATA[ createTime < #{endDate} ]]>
    </select>
    <select id="getTestAllByMap" resultType="java.util.Map" parameterType="java.util.Map">
        select
        sum(id) ID, test_name testName
        from test_all
        limit 1
    </select>
</mapper>
<!-- 此文件作为样例对mybatis xml文件的配置进行解读 -->